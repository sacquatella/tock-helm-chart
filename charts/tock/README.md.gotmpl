{{ template "chart.header" . }}
{{ template "chart.description" . }}

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}



## DLDR

To install the chart with the release name `my-release`:

```console
$ helm registry login -u myuser registry.hub.docker.com 
$ helm install my-release  oci://registry.hub.docker.com/onelans/{{ template "chart.name" . }} --version 0.4.2
```

## Introduction

This chart helps to setup a Tock environnement. 


{{ template "chart.requirementsSection" . }}

## Sections

This creates values, but sectioned into own section tables if a section comment is provided.

{{ template "chart.valuesSection" . }}



## Authentification configurations

The following sample clould be added as ConfigMap to configure the authentication of the admin web interface.

To use it , you have to apply the following ConfigMap to your cluster.

```console
$ kubectl apply -f ./admin-web-auth-cfg.yaml
```

And set in your values file `adminWeb.authCongifMap` to `admin-web-auth-cfg` (configmap name)

`admin-web-auth-cfg.yaml`

```yaml
apiVersion: v1
  kind: ConfigMap
  metadata:
    name: admin-web-auth-cfg
    labels:
      app.kubernetes.io/name: admin-web-auth
      app.kubernetes.io/component: admin-web
    data:
      tock_users:  "alice@tock.ai,bob@tock.ai" # Credentials (separated by commas). Default value `admin@app.com`
      tock_passwords: "secret1,secret2" # Password (separated by commas). Default value `password`
      tock_organizations: "tock,tock" # Organizations (separated by commas). Default value `app``
      tock_roles: "botUser,nlpUser|botUser|admin|technicalAdmin" #  Roles separated | (and then by commas). Default value is empty."
 ```

In this example, Alice has the role 'botUser', whereas Bob has all roles. 
To define the identities and roles of several users, separate their values with commas.


## Deployment on arm64 and processor without AVX instructions

It seems the native build of MongoDB requires AVX instructions at the processor level

https://github.com/bitnami/charts/issues/12834

For Arm, the image used in value must be changed and the following Mongodb chart image should be used instead.

https://artifacthub.io/packages/helm/bitnami/mongodb/13.6.8

## Deployment sample on Rancher Desktop 

```console
$ helm install mytock oci://registry.hub.docker.com/onelans/{{ template "chart.name" . }} --version 0.3.4 -f ./rancher-values.yaml
```

`rancher-values.yaml`
```yaml
global:
  wildcardDomain: rancher.localhost
  deployMongoDb:
    enabled: true

botApi:
  environment:
    tock_default_log_level: "debug"
    tock_web_use_default_cors_handler_url : "*"
  ingress:
    enabled: true


mongodb:
  architecture: "replicaset"
  auth:
    enabled: false
  persistence:
    enabled: false
    size: 1Gi
  image:
    repository: zcube/bitnami-compat-mongodb
    tag: 6.0.5

nlpApi:
  environment:
    tock_env: prod
    tock_web_use_default_cors_handler: "true"
    tock_web_use_default_cors_handler_url: "*"
    tock_web_use_default_cors_handler_with_credentials: "false"
  repository:
    image: tock/nlp_api
    tag: 24.3.4


adminWeb:
  ingress:
    enabled: true
```

> The values file defines a MongoDB image that is compatible with macOS Arm

## Deployment sample on GKE

```console
$ helm install mytock oci://registry.hub.docker.com/onelans/{{ template "chart.name" . }} --version 0.3.4 -f ./gke-values.yaml
```

`gke-values.yaml`

```yaml
global:
  wildcardDomain: gke.mydomain.com
  deployMongoDb:
    enabled: true

botApi:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "gce"
  service:
    type: NodePort

adminWeb:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "gce"  
  service:
    type: NodePort
```

> The values file defines the use of the GCE ingress controller
> You can get the external IP of the ingress controller with the following command
> `kubectl get ingress mytock-admin-web  --output yaml`

