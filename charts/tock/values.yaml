# Default values for tork.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  # -- Default domain used for ingress
  # @section -- Global
  wildcardDomain: rancher.localhost # ingress domain name
  # -- Default Kubernetes cluster domain
  # @section -- Global
  clusterDomain: cluster.local
  NetworkPolicy: 
    # -- Enable creation of NetworkPolicy resources
    # @section -- Global
    enabled: false 
  deployMongoDb:
    # -- If true Deploy MongoDB subchart
    # @section -- Global
    enabled: true
  # -- If mongoDB is not deployed by the chart, you can use this to connect to an external mongoDB
  # @section -- Global
  #mongodbUrls: mongodb://myuser:mypass@fqdn-node1:27017,fqdn-node2:27017,fqdn-node3:27017/mydb?replicaSet=rs0
  mongodbUrls: "mongodb://myuser:mypass@10.118.127.233:27017,10.118.127.234:27017,10.118.127.235:27017/mydb?replicaSet=rs0"
  # -- If mongoDB is not deployed by the chart, the node use to check if the mongodb is up
  # @section -- Global
  mongodbcheckfqdn: fqdn-node1
  # -- If mongoDB is not deployed by the chart, the mongodb port
  # @section -- Global
  mongodbPort: "27017"
  ## MongoDb datsets names. Chaque base de données est utilisée pour une fonctionnalité spécifique, cepandant, il est possible de les regrouper dans une seule base de données.
  ## Un composant peut utiliser une base de données spécifique, ou toutes les bases de données. Les valeurs pa defaut dans le code sont les suivantes: tock_front, tock_model, tock_cache, tock_bot
  ## la base des phrases qualifiées
  #tockMongodbFront: "tock_front"
  ## la base pour stocker les modèles
  #tockMongodbModel: "tock_model"
  ## la base de cache (peu utilisée)
  #tockMongdbCache: "tock_cache"
  ## la base de la partie conversationnelle
  #tockMongodbBot: "tock_bot"

  # -- Global Docker image registry
  # @section -- Global
  imageRegistry: ""
  # -- Glocal Image pull secret
  # E.g.
  # imagePullSecrets:
  #   - myRegistryKeySecretName 
  # @section -- Global
  imagePullSecrets: []
  # -- initcontainer images
  # @raw
  # @section -- Global
  initContainerImage:
    registry: docker.io
    repository: busybox
    #tag: latest
    tag: "1.36.1"
    pullPolicy: IfNotPresent
    pullSecrets: []
    # -- Configure Container Security Context
    # @section -- Global
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    # @param containerSecurityContext.enabled Enabled init containers' Security Context
    # @param containerSecurityContext.runAsUser Set init container Server containers' Security Context runAsUser
    containerSecurityContext:
      enabled: true
      runAsUser: 99
      runAsGroup: 99
      runAsNonRoot: true
  
# ==============================================
#  AdminWeb Settings
# ==============================================
adminWeb:
  environment:
    # -- botadminverticle_body_limit
    # @section -- adminWeb
    botadminverticle_body_limit: "-1"
    # -- Environment
    # @section -- adminWeb
    tock_https_env: "prod"
    # -- tock_env
    # @section -- adminWeb
    tock_env: "false"
    # -- log level
    # @section -- adminWeb
    tock_default_log_level: "info"
    # -- Have to be set if tock studio is deployed as subdomain https://sssss/tockstudio
    # @section -- adminWeb
    botadminverticle_base_href : ""

    # Following values are per default computed by the chart
    # nlp_duckling_url: http://duckling:8080
    # tock_bot_admin_rest_default_base_url: http://bot-api:8080
    # tock_bot_compiler_service_url: http://kotlin-compiler:8080
    # tock_configuration_bot_default_base_url: http://bot-api:8080
    # tock_mongo_url: mongodb://mongodb:27017/?replicaSet=tock
    # tock_web_use_default_cors_handler: "true"
    
  
  
  # Add the configuration in the form of key value pair in a configmap.
  # If authCongifMap is not set default values are used.
  # ref: https://doc.tock.ai/tock/fr/admin/securite/
  # `
  # apiVersion: v1
  #  kind: ConfigMap
  #  metadata:
  #    name: admin-web-auth-cfg
  #  labels:
  #    app.kubernetes.io/name: admin-web-auth
  #    app.kubernetes.io/component: admin-web
  #    data:
  #      tock_users:  "alice@tock.ai,bob@tock.ai" # Identifiants (séparés par des virgules). Valeur par defaut `admin@app.com`
  #      tock_passwords: "secret1,secret2" # Mots de passe (séparés par des virgules). Valleur par defaut `password`` 
  #      tock_organizations: "tock,tock" # Organisations (séparées par des virgules). Valleur par defaut `app``
  #      tock_roles: "botUser,nlpUser|botUser|admin|technicalAdmin" #  Rôles séparés par des | (puis par des virgules). Valeur par defaut vide
  # `
  # Dans cet exemple, Alice a le rôle botUser, alors que Bob a tous les rôles.
  # Pour définir l'identité et les rôles de plusieurs utilisateurs, on sépare les valeurs par des virgules.
  # -- Authentification configurations, set confimap name. cf README to have a sample.
  # @section -- adminWeb
  authCongifMap: ""

  # -- Replication settings, should be = 1 in production
  # @section -- adminWeb
  replicas: 1 # should be = 1 in production
  
  image:
    # -- Docker image registry
    # @section -- adminWeb
    registry: docker.io
    # -- Docker docker image name
    # @section -- adminWeb
    repository: tock/bot_admin 
    # -- Docker image tag
    # @section -- adminWeb
    tag: 23.9.2
    # -- Optionally specify an array of imagePullSecrets.
    # Secrets must be manually created in the namespace.
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    # e.g:
    # pullSecrets:
    #   - myRegistryKeySecretName
    # @section -- adminWeb
    pullSecrets: []

  containerSecurityContext:
      # -- Configure containers' Security Context
      # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
      # @section -- adminWeb
      enabled: true
      # -- Run as non root
      # @section -- adminWeb
      runAsNonRoot: true
      # -- Run as user id
      # @section -- adminWeb
      runAsUser: 99
      # -- Run as group id
      # @section -- adminWeb
      runAsGroup: 99

  podSecurityContext:
    # -- Configure Pod Security Context
    # @section -- adminWeb
    enabled: true
    # -- fsGroup
    # @section -- adminWeb
    fsGroup: 99
    # -- sysctls
    # @section -- adminWeb
    sysctls: []

  service:
    # -- kubernetes service type
    # @section -- adminWeb
    type: ClusterIP
    # -- kubernetes service port
    # @section -- adminWeb
    port: 8080

  ingress:
    # -- enable the ingress
    # @section -- adminWeb
    enabled: true
    
    # -- set to true for deployement on cluster version < 1.19 (apiVersion: networking.k8s.io/v1beta1 vs apiVersion: networking.k8s.io/v1)
    # @section -- adminWeb
    deprecated: false
    
    # -- ingress annotations
    # annotations:
    #  kubernetes.io/ingress.class: traefik
    #  kubernetes.io/ingress.class: nginx
    #  kubernetes.io/tls-acme: "true"
    # @section -- adminWeb
    annotations: {}
  
    # -- ingress path
    # @section -- adminWeb
    path: / # ingress path
  
    #hosts:
    #  - chart-example.local

    # -- TLS secrets and which hosts they sould be use for
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
    # @section -- adminWeb
    tls: []  
    

  ## adminWeb resource requests and limits
  ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ## @param resources.limits The resources limits for the haproxy containers
  ## @param resources.requests The requested resources for the haproxy containers
  ##
  resources: 
    # -- resources limits
    # @section -- adminWeb
    limits: {}
    # -- resources requests
    # @section -- adminWeb
    requests: {}

  # -- node selector
  # @section -- adminWeb
  nodeSelector: {} # node selector
  # -- tolerations
  # @section -- adminWeb
  tolerations: [] # tolerations
  # -- affinity
  # @section -- adminWeb
  affinity: {} # affinity

# ==============================================
#  BotApi Settings
# ==============================================
botApi:
  environment:
    # -- tock environment (prod, dev, integ)
    # @section -- botApi
    tock_env: integ
    # -- bot api log level
    # @section -- botApi
    tock_default_log_level: info
    # -- CORS handler
    # @section -- botApi
    tock_web_use_default_cors_handler: "true"
    # -- CORS handler URL
    # @section -- botApi
    tock_web_use_default_cors_handler_url: '*'
    # -- CORS handler with credentials
    # @section -- botApi
    tock_web_use_default_cors_handler_with_credentials: "false"
    # -- Enable websocket
    # @section -- botApi
    tock_websocket_enabled: "true"
    # -- CORS handler allowed methods
    # Slould be set to "GET, POST, PUT, DELETE, OPTIONS, HEAD"
    # @section -- botApi
    tock_web_use_default_cors_handler_allowed_methods : ""
    # -- Enable markdown
    # @section -- botApi
    tock_web_enable_markdown: "false"
    # -- Enable Server Sent Event
    # @section -- botApi
    tock_web_sse: true
    # -- Timeout in seconds for websocket service, default is 10
    # @section -- botApi
    tock_api_timout_in_s: "10" 
    # -- Timeout in milliseconds for webhook service, default is 5000
    # @section -- botApi
    tock_bot_api_timeout_in_ms: "5000"
  # Sould be tested
  # tock_web_enable_markdown_in_text_message: "true"
  # Computer by the chart if not set
  #  tock_web_use_default_cors_handler_allowed_headers : "Content-Type, Authorization, Content-Length, X-Requested-With"
  #  tock_nlp_service_url: http://nlp-api:8080
  
  # -- should be > 1 in production
  # @section -- botApi
  replicas: 1 
  image:
    # -- Docker image registry
    # @section -- botApi
    registry: docker.io
    # -- Docker image name
    # @section -- botApi
    repository: tock/bot_api # docker image name
    # -- Docker image tag
    # @section -- botApi
    tag: 23.9.2
    # -- Optionally specify an array of imagePullSecrets.
    # Secrets must be manually created in the namespace.
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    # e.g:
    # pullSecrets:
    #   - myRegistryKeySecretName
    # @section -- botApi
    pullSecrets: []

  containerSecurityContext:
      # -- Configure Container Security Context
      # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
      # @section -- botApi
      enabled: true
      # -- Run as non root
      # @section -- botApi
      runAsNonRoot: true
      # -- Run as user id
      # @section -- botApi
      runAsUser: 99
      # -- Run as Group id
      # @section -- botApi
      runAsGroup: 99

  podSecurityContext:
    # -- Configure Pod Security Context
    # @section -- botApi
    enabled: true
    # -- fsGroup
    # @section -- botApi
    fsGroup: 99
    # -- sysctls
    # @section -- botApi
    sysctls: []

  service:
    # -- kubernetes service type
    # @section -- botApi
    type: ClusterIP
    # -- kubernetes service port
    # @section -- botApi
    port: 8080 
  
  ingress:
    # --  enable bot api the ingress
    # @section -- botApi
    enabled: true
    # -- set to true for deployement on cluster version < 1.19 (apiVersion: networking.k8s.io/v1beta1 vs apiVersion: networking.k8s.io/v1)
    # @section -- botApi
    deprecated: false  # set to true for deployement on cluster version < 1.19 (apiVersion: networking.k8s.io/v1beta1 vs apiVersion: networking.k8s.io/v1)
    # -- annotations:
    # kubernetes.io/ingress.class: traefik
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # @section -- botApi
    annotations: {} # ingress annotations
    # -- ingress path
    # @section -- botApi
    path: /
    #hosts:
    #  - chart-example.local

    # -- TLS secrets and which hosts they sould be use for
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
    # @section -- botApi
    tls: [] 
   
  # -- botApi resource requests and limits
  # ref: https://kubernetes.io/docs/user-guide/compute-resources/
  # @section -- botApi
  resources: # resources limits and request
    limits: {} # resources limits
    requests: {}  # resources requests

  # -- node selector
  # @section -- botApi
  nodeSelector: {} 

  # -- tolerations
  # @section -- botApi
  tolerations: [] 
  
  # -- affinity
  # @section -- botApi
  affinity: {} # affinity

# ==============================================
#  BuildWorker Settings
# ==============================================
buildWorker:
  environment:
    # -- tock environment (prod, dev, integ)
    # @section -- buildWorker
    tock_env: prod
    # -- log level
    # @section -- buildWorker
    tock_default_log_level: info
    # -- JAVA_ARGS
    # @section -- buildWorker
    JAVA_ARGS: -Xmx1g -XX:MaxMetaspaceSize=256m

  image:
    # -- Docker image registry
    # @section -- buildWorker
    registry: docker.io
    # -- Docker image name
    # @section -- buildWorker
    repository: tock/build_worker
    # -- Docker image tag
    # @section -- buildWorker
    tag: 23.9.2 # docker image tag
    # -- Optionally specify an array of imagePullSecrets.
    # Secrets must be manually created in the namespace.
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    # e.g:
    # pullSecrets:
    #   - myRegistryKeySecretName
    # @section -- buildWorker
    pullSecrets: []


  containerSecurityContext:
      # -- Configure Container Security Context
      # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
      # @section -- buildWorker
      enabled: true
      # -- Run as non root
      # @section -- buildWorker
      runAsNonRoot: true
      # -- Run as user id
      # @section -- buildWorker
      runAsUser: 99
      # -- Run as Group id
      # @section -- buildWorker
      runAsGroup: 99

  podSecurityContext:
      # -- Configure Pod Security Context
      # @section -- buildWorker
      enabled: true
      # -- fsGroup
      # @section -- buildWorker
      fsGroup: 99
      # -- sysctls
      # @section -- buildWorker
      sysctls: []

  # -- botApi resource requests and limits
  # ref: https://kubernetes.io/docs/user-guide/compute-resources/
  # @section -- buildWorker
  resources: #resources limits and request
    limits: {} # resources limits
    requests: {}  # resources requests

  # -- node selector
  # @section -- buildWorker
  nodeSelector: {}

  # -- tolerations
  # @section -- buildWorker
  tolerations: []

  # -- affinity
  # @section -- buildWorker
  affinity: {}

# ==============================================
#  Duckling Settings
# ==============================================

duckling:
  environment:
    tock_env: prod
  # tock_default_log_level: info

  replicas: 1 # shoud be > 1 in production
  image:
    registry: docker.io
    repository: tock/duckling # docker image name
    tag: 23.9.2 # docker image tag
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  
  ## Configure Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param containerSecurityContext.enabled Enabled ducking containers' Security Context
  ## @param containerSecurityContext.runAsUser Set Apache Server containers' Security Context runAsUser
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 99
    runAsGroup: 99

  podSecurityContext:
      enabled: true
      fsGroup: 99
      sysctls: []

  ## buildWorker resource requests and limits
  ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ## @param resources.limits The resources limits for the haproxy containers
  ## @param resources.requests The requested resources for the haproxy containers
  ##
  resources: #resources limits and request
    limits: {} # resources limits
    requests: {}  # resources requests

  nodeSelector: {} # node selector

  tolerations: [] # tolerations

  affinity: {} # affinity


# ==============================================
#  KotlinCompiler Settings
# ==============================================
# @section -- kotlinCompiler
kotlinCompiler:
  environment:
    tock_env: prod
    tock_kotlin_compiler_classpath: /maven
  # tock_default_log_level: info
  
  image:
    registry: docker.io
    repository: tock/kotlin_compiler # docker image name
    tag: 23.9.2 # docker image tag
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []

  ## Configure Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param containerSecurityContext.enabled Enabled kotlinCompiler containers' Security Context
  ## @param containerSecurityContext.runAsUser Set kotlinCompiler containers' Security Context runAsUser
  containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 99
      runAsGroup: 99

  podSecurityContext:
      enabled: true
      fsGroup: 99
      sysctls: []

  ## kotlinCompiler resource requests and limits
  ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ## @param resources.limits The resources limits for the haproxy containers
  ## @param resources.requests The requested resources for the haproxy containers
  ##
  resources: # resources limits and request
    limits: {} # resources limits
    requests: {}  # resources requests

  nodeSelector: {} # node selector

  tolerations: [] # tolerations

  affinity: {} # affinity


# ==============================================
#  NlpApi Settings
# ==============================================
# @section -- nlpApi
nlpApi:
  environment:
    #nlp_duckling_url: http://duckling:8080
    tock_env: prod
    tock_web_use_default_cors_handler: "true"
    tock_web_use_default_cors_handler_url: '*'
    tock_web_use_default_cors_handler_with_credentials: "false"
  # tock_web_use_default_cors_handler_allowed_methods : "GET, POST, PUT, DELETE, OPTIONS, HEAD"
  # tock_default_log_level: info 
  replicas: 1 # should be > 1 in production
  image:
    registry: docker.io
    repository: tock/nlp_api
    tag: 23.9.2
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []

  ## Configure Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param containerSecurityContext.enabled Enabled nlpApi containers' Security Context
  ## @param containerSecurityContext.runAsUser Set nlpApi containers' Security Context runAsUser
  containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 99
      runAsGroup: 99

  podSecurityContext:
      enabled: true
      fsGroup: 99
      sysctls: []

  ## nlpApi resource requests and limits
  ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ## @param resources.limits The resources limits for the haproxy containers
  ## @param resources.requests The requested resources for the haproxy containers
  ##
  resources: # resources limits and request
    limits: {} # resources limits
    requests: {}  # resources requests

  nodeSelector: {} # node selector

  tolerations: [] # tolerations

  affinity: {} # affinity


# ==============================================
# MongoDB Settings
# Bitnami 13.6.8
# ==============================================
# @section -- mongodb
mongodb:
  architecture: "replicaset"
  replicaSetName: "tock"
  replicaCount: 3
  replicaSetConfigurationSettings:
    enabled: true
  extraFlags:
    - "--bind_ip_all"
  arbiter:
    enabled: false
  auth:
    enabled: false
  persistence:
    enabled: true
    size: 1Gi
#    storageClass: local-path
#  image:
#    repository: bitnami/mongodb
#    tag: 6.0.4-debian-11-r10
#  image:
#    repository: library/mongo
#    tag: 6.0.2

## Image for OSX on ARM64 
#  image:
#    repository: zcube/bitnami-compat-mongodb
#    tag: 6.0.5

#  image:
#    repository: arm64v8/mongo
#    tag: 6.0.2